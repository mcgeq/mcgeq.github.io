<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mcge</title>
    <link>http://www.gemc.club/</link>
    <description>Recent content on Mcge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Oct 2024 22:29:09 +0800</lastBuildDate>
    <atom:link href="http://www.gemc.club/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JSX and Components</title>
      <link>http://www.gemc.club/posts/jsx-and-components/</link>
      <pubDate>Wed, 23 Oct 2024 22:25:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/jsx-and-components/</guid>
      <description>JSX 基础语法 JSX JS 的扩展，写在 JS 代码中，组件的 UI 结构 语法和 HTML 相似 使用 TypeScript 文件扩展为.tsx 使用 JavaScript 文件扩展为.jsx 标签 首字母大小写的区别，大写表示一个组件 标签必须闭合 属性 class 要使用 className style 要使用 JS 对象且 key 用驼峰写法 for 要使用 htmlFor 事件 格式为 onEvent 的形式 必须传入一个函数(fn 非 fn()) 注意 TypeScript 类型 使用变量 使用{variable}可以插入 JS 变量、函数、表达式 可以插入普通文件、属性 可用于注释 {* 注释 *} 条件判断 使用 &amp;amp;&amp;amp; {flag &amp;amp;&amp;amp; &amp;lt;p&amp;gt;mcge&amp;lt;/p&amp;gt;} 使用三元表达式 使用函数 </description>
    </item>
    <item>
      <title>Learn the generics of TypeScript</title>
      <link>http://www.gemc.club/posts/learn-the-generics-of-typescript/</link>
      <pubDate>Wed, 23 Oct 2024 22:25:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/learn-the-generics-of-typescript/</guid>
      <description>Generics(泛型) 泛型定义 泛型是一种编程语言特性，其允许在定义函数、类、接口等时使用占位符来表示类型，而不是具体的类型。&#xA;具有以下特点的数据类型叫泛型&#xA;定义时不明确使用时必须明确成某种具体数据类型的数据类型。【泛型的宽泛】 编译期间进行数据类型检查的数据类型。【泛型的严谨】 </description>
    </item>
    <item>
      <title>tsconfig 核心配置文件详解</title>
      <link>http://www.gemc.club/posts/tsconfig-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 08 Jun 2024 11:04:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/tsconfig-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>基本选项 compilerOptions include exclude extends compilerOptions 编译器选项，tsc 编译代码时会按照配置选项进行编译。&#xA;allowUnreachableCode 不报告执行不到的代码错误 undefined 默认，提供建议作为警告 true 无法访问的代码将被忽略 false 引发有关无法访问代码的错误 allowUnusedLabels 允许未使用的标签 undefined 默认，提供建议警告 true 未使用的标签将被忽略 false 引发有关未使用标签的错误 alwaysStrict 始终严格模式，确保在 ECMAScript 严格模式下解析文件 并为每个源文件使用 use strict exactOptionalPropertyTypes 确切的可选属性类型 启用，TypeScript 处理属性或 type interfaces 具有?前缀的属性有更严格的规则 noUnusedLocals 报告未使用的变量 noUnusedParameters 报告未使用的参数 noFallthroughCasesInSwitch 防止 switch 语句贯穿 noEmit 禁止生成 js 文件 strict 严格模式 lib 库选项 编译时依赖的库 target 目标选项 tsc 编译代码时以哪个版本进行编译 module 指定生成哪个模块系统代码 None CommonJS AMD System UMD ES6 ES2015 ES2020 ES2022 ESNext rootDir 编译的文件目录 outDir tsc 编译后输出的文件目录 moduleResolution 模块解析策略 classic node10 node16 nodenext bundler node 采用 node 模块解析的方式查找文件 [从内往外查找 import 引入的文件] classic 采用 classic 模块解析的方式查找文件[从外往内查找 import 引入的文件] resolveJsonModule 是否支持引入 json 文件 allowJs 允许 JS 文件引入 checkJs 检查 JS 与 allowJs 配合使用 checkJs 启用时，js 文件会报告错误，相当于在 js 文件顶部包含 @ts-check 详细的编译器选项compilerOptions</description>
    </item>
    <item>
      <title>learnning-typescript</title>
      <link>http://www.gemc.club/posts/learnning-typescript/</link>
      <pubDate>Sun, 26 May 2024 16:29:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/learnning-typescript/</guid>
      <description>本学习文档时学习慕课网的 TS+React18 高仿 AntD&#xA;欢迎来到 TypeScript 任何可以使用 JavaScript 来编写的=优秀=的大型应用，最终会由 TypeScript 编写。 &amp;ndash; 韩骏，2019&#xA;编程语言的类型 动态类型 静态类型 TypeScript 究竟是什么 JavaScript 超集 静态类型风格的类型系统 从 es6 到 es14 甚至是 esnext 的语法支持 兼容浏览器、系统、服务器 开源 为什么要使用 TypeScript 程序更容易理解 效率更高 更少的错误 编译期间能够发现大部分错误 好的包容性 安装 TypeScript 环境 windows11 vim9 nodejs20^ pnpm 安装 1 pnpm add -g typescript 数据类型 JavaScript 数据类型 原始类型</description>
    </item>
    <item>
      <title>第一章 Rust 基础知识</title>
      <link>http://www.gemc.club/posts/%E7%AC%AC%E4%B8%80%E7%AB%A0-rust-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 21 Apr 2024 21:00:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/%E7%AC%AC%E4%B8%80%E7%AB%A0-rust-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>1.1 安装&amp;amp;&amp;amp;更新 1.2 编译器与包管理工具及开发环境搭建 1.3 获取 Rust 库、换源&#xA;安装与更新 Rust 安装比较简单，依据官网进行安装即可。 本学习笔记使用 Windows11 进行。因此选择下载=RUSTUP-INIT.EXE(64 位)=。 下载成功后，双击运行，按照提示进行安装即可。查看安装是否成功。&#xA;rustc -V rustup show cargo &amp;ndash;version rustup 基本使用 升级 rustup update 更新 rust rustup install stable|nightly 安装指定 rust 版本 stable: 稳定版 nightly: 夜版，最新版本，每天构建的 版本管理 rustup default nightly 设置非=stable=为默认版本 卸载 rustup self uninstall 添加组件 rustup component add 编译器与包管理工具记忆环境搭建 编译器 rustc rustc -V 查看版本 rustc -o out source.</description>
    </item>
    <item>
      <title>idea_custom_method_annotation</title>
      <link>http://www.gemc.club/posts/idea-custom-method-annotation/</link>
      <pubDate>Wed, 28 Feb 2024 21:32:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/idea-custom-method-annotation/</guid>
      <description>IDEA 自定义方法注释 使用快捷键=Ctrl+Alt+S=快捷键打开设置界面 点击 Editor-&amp;gt;Live Templates 将 Tab 改成 Enter，点击 + 号，添加一个 Template Group，随便输入一个名称 新建之后选中，再次点击+号，新建一个 Live Template 给 Abbreviation 输入一个快捷键，比如**,Description 是描述，Template Text 是模板 Template Text 内容 模板不能以/开头，不然无法获取参数和方法返回类型 ** * @Description: TODO $params$ $return$ * @Author: $user$ $date$ $time$ * @Version 1.0 */ 编辑变量 params 代表方法的参数，这里将会统一对齐 1 groovyScript(&amp;#34;if(\&amp;#34;${_1}\&amp;#34;.length() == 2) {return &amp;#39;&amp;#39;;} else {def result=&amp;#39;&amp;#39;; def params=\&amp;#34;${_1}\&amp;#34;.</description>
    </item>
    <item>
      <title>什么是.NET or .NET Framework or .NET Core?</title>
      <link>http://www.gemc.club/posts/%E4%BB%80%E4%B9%88%E6%98%AF-.net-or-.net-framework-or-/</link>
      <pubDate>Sat, 13 Jan 2024 14:27:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/%E4%BB%80%E4%B9%88%E6%98%AF-.net-or-.net-framework-or-/</guid>
      <description>什么是.NET&#xA;.NET 是一个*免费的跨平台开放源代码*开发平台，用于生成多种类型的应用程序。 .NET 应用和库是通过源代码和项目文件，使用.NET CLI 或集成开发环境生成的。&#xA;什么是.NET </description>
    </item>
    <item>
      <title>emacs 的 cl-lib 包</title>
      <link>http://www.gemc.club/posts/emacs-%E7%9A%84-cl-lib-%E5%8C%85/</link>
      <pubDate>Sun, 17 Dec 2023 15:12:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/emacs-%E7%9A%84-cl-lib-%E5%8C%85/</guid>
      <description>cl-lib 是什么 cl-lib 包其为 emacs 提供了许多函数和控制结构。&#xA;cl-lib 的组成 cl-lib.el 其包含了基础的函数以及关于整个包的信息，包含了所有必要的 `autoload‘指令。 cl-extra.el 包含了一些复杂的函数 cl-seq.el 包含操作序列的高级函数 cl-macs.el 包含宏，其提供了语法扩展 常用的控制结构 cl-incf/cl-decf 这两个函数接受一个参数，以及一个可选参数。只有一个参数，*cl-incf* 将变量加 1，*cl-decf* 减去 1&#xA;1 2 3 (setq x 1) (cl-incf x) (cl-decf x) </description>
    </item>
    <item>
      <title>Hugo is deployed on GitHub Pages</title>
      <link>http://www.gemc.club/posts/hugo-is-deployed-on-github-pages/</link>
      <pubDate>Sun, 10 Dec 2023 13:12:00 +0800</pubDate>
      <guid>http://www.gemc.club/posts/hugo-is-deployed-on-github-pages/</guid>
      <description>安装 hugo 环境 Arch Linux 部署 blog</description>
    </item>
  </channel>
</rss>
